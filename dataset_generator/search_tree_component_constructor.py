'''
this file takes data generated by the solver, and constructs it into a search tree trace.

to run: 
python -m dataset_generator.search_tree_component_constructor
'''

import json

def construct_search_tree_traces(input_file_path: str, output_file_path: str):
    """
    Process JSON data and convert it into search tree traces.
    
    Args:
        input_file_path (str): Path to input JSON file containing solver data
        output_file_path (str): Path where processed data will be saved
    """
    # Read input JSON file
    with open(input_file_path, 'r') as f:
        data = json.load(f)
    
    processed_data = []
    
    # Process each JSON object
    for idx, item in enumerate(data):
        # Extract required fields
        game_state_raw = item["1. GameState"]["game_context_str"]
        range_eval = item["2. RangeEval"]
        oop_action_range_eval = item["3. OOP_Action_RangeEval"].rstrip("\n") # Remove trailing newline
        expand_oop_action = item["4. Expand_OOP_Action"]
        ip_highest_freq_action = item["5. IP_highest_freq_action"]
        ip_action_range_eval = expand_oop_action["IP_Action_RangeEval"].rstrip("\n") # Remove trailing newline

        # Modify the game_state string for the input
        game_state = game_state_raw.replace("<GameContext", "<gamestate>", 1)
        if game_state.endswith(">"):
            game_state = game_state[:-1] + "</gamestate>"

        # Construct the output string with consistent lowercase tags and content format
        output_string = f"""<rangesummary> {range_eval} </rangesummary>

<oop>
{oop_action_range_eval}
</oop>

<oop action="{expand_oop_action["OOP high_freq_action"]}">
  <rangesummary> {expand_oop_action["RangeEval"]} </rangesummary>
  <ip>
{ip_action_range_eval}
  </ip>
</oop>

<ip_highest_freq_action>{ip_highest_freq_action["action"]}</ip_highest_freq_action>"""

        processed_item = {
            "input": game_state,
            "output": output_string
        }
        processed_data.append(processed_item)
    
    # Save processed data to output file
    with open(output_file_path, 'w') as f:
        json.dump(processed_data, f, indent=2)
    
    print(f"Processed data saved to {output_file_path}")

if __name__ == "__main__":
    # Example usage (replace with actual paths)
    input_file_path = "/home/xuandong/mnt/poker/internal-search-distillation-postflop-solver/datasets/1.2_turn_river_split/next_32418_turn_river_search_tree_components.json"
    output_file_path = "/home/xuandong/mnt/poker/internal-search-distillation-postflop-solver/datasets/1.2_turn_river_split/next_32418_turn_river_search_tree_datasubset.json"
    construct_search_tree_traces(input_file_path, output_file_path)

